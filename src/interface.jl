"""
    abstract type AbstractPolynomialBasis end

Polynomial basis of a subspace of the polynomials [Section~3.1.5, BPT12].

[BPT12] Blekherman, G.; Parrilo, P. A. & Thomas, R. R.
*Semidefinite Optimization and Convex Algebraic Geometry*.
Society for Industrial and Applied Mathematics, **2012**.
"""
abstract type AbstractPolynomialBasis end

generators(basis::AbstractPolynomialBasis) = basis.polynomials

function MP.polynomial(coefs::Vector, basis::AbstractPolynomialBasis)
    return MP.polynomial(i -> coefs[i], basis)
end

"""
    maxdegree_basis(B::Type{<:AbstractPolynomialBasis}, variables, maxdegree::Int)

Return the basis of type `B` generating all polynomials of degree up to
`maxdegree` with variables `variables`.
"""
function maxdegree_basis end

"""
    basis_covering_monomials(B::Type{<:AbstractPolynomialBasis}, monos::AbstractVector{<:AbstractMonomial})

Return the minimal basis of type `B` that can generate all polynomials of the
monomial basis generated by `monos`.

## Examples

For example, to generate all the polynomials with nonzero coefficients for the
monomials `x^4` and `x^2`, we need three polynomials as otherwise, we generate
polynomials with nonzero constant term.
```jldoctest
julia> using DynamicPolynomials

julia> @polyvar x
(x,)

julia> basis_covering_monomials(ChebyshevBasis, [x^2, x^4])
ChebyshevBasisFirstKind{Polynomial{DynamicPolynomials.Commutative{DynamicPolynomials.CreationOrder}, Graded{LexOrder}, Float64}}(Polynomial{DynamicPolynomials.Commutative{DynamicPolynomials.CreationOrder}, Graded{LexOrder}, Float64}[1.0, -1.0 + 2.0x², 1.0 - 8.0x² + 8.0x⁴])
```
"""
function basis_covering_monomials end

function _show(io::IO, mime::MIME, basis::AbstractPolynomialBasis)
    T = typeof(basis)
    print(io, nameof(T))
    print(io, "([")
    first = true
    for g in generators(basis)
        if !first
            print(io, ", ")
        end
        first = false
        show(io, mime, g)
    end
    return print(io, "])")
end

function Base.show(
    io::IO,
    mime::MIME"text/plain",
    basis::AbstractPolynomialBasis,
)
    return _show(io, mime, basis)
end
function Base.show(
    io::IO,
    mime::MIME"text/print",
    basis::AbstractPolynomialBasis,
)
    return _show(io, mime, basis)
end

function Base.print(io::IO, basis::AbstractPolynomialBasis)
    return show(io, MIME"text/print"(), basis)
end
function Base.show(io::IO, basis::AbstractPolynomialBasis)
    return show(io, MIME"text/plain"(), basis)
end
